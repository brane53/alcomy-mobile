import * as moment from 'moment';

export class Person {
  firstName?: string;
  lastName?: string;
  middleName?: string;
  gender?: string;
}

export class Address {
  street?: string = '';
  city?: string = '';
  state?: string = '';
  zip?: string = '';
}

export class Device {
  pushToken?: string;
  canPush?: boolean;
}

export class PhoneNumber {
  name?: string;
  description?: string;
  number?: string;
  type?: string; // mobile, home, work, fax, etc.
  isPrimary?: boolean;
}

export class Pharmacy {
  id?: string;
  name?: string;
  address?: Address;
  phoneNumbers?: PhoneNumber[];
}

export class Resident {
  id?: string;
  firstName?: string;
  lastName?: string;
  middleName?: string;
  gender?: string;
  birthDate?: string;
  ssn?: string;
  code?: string;
  isAmbulatory?: boolean;
  isVerbal?: boolean;
  religion?: string;
  profileUrl?: string;
  weightLog?: Object[];
  emergencyContacts?: Object[];
  facilityInfo?: Object;
  paymentInfo?: Object;
  medications?: MedicationRecord[] | number;
  
}

export class PrnRecord {
  id?: string;
  medication: MedicationRecord;
  reasonGiven: string;
  givenAt: string;
  givenBy: Employee;
  followUpDateTime: string;
  response?: string;
  responseNotes?: string;
}

export class Medication {
  brandName: string;
  genericName: string;
  description?: string;
  strength?: {amount: number; measurement: string;};
  form?: string;
  imageUrl?: string;
}

export class MedicationInventoryItem {
  containerType?: string;
  startQuantity?: number;
  quantity?: number;
  startDate?: string;
  endDate?: string;
  fillDate?: string;
  expirationDate?: string;
  pharmacy?: Pharmacy;
  rxNumber?: string; // should this go into inventory
}

export class MedicationRecord extends Medication {
  id?: string;
  instructions?: string;
  status?: string; // whether the medication is active, on hold, discontinued
  statusHistory?: MedicationStatusHistory[];
  history?: MedicationHistoryRecord[];
  createDate?: string; // should be autogenerated on the date the medication record was createDate
  createdBy?: User; // the user that created the medication record
  startDate?: string;
  endDate?: string;
  dosage?: Dosage;
  refills?: number; // number of refills for the prescription
  inventory?: MedicationInventoryItem[];
  script?: MedicationPrescription;
  isNarcotic?: boolean;
}

export class MedicationHistoryRecord {
  action: string;
  actionDate: Date;
  user: User;

}

export class MedicationStatusHistory {
  status: string;
  date: Date; 
  restartDate?: Date;
  changeDate?: Date;
}

export class MedicationPrescription {
  id?: string;
  resident: Resident;
  prescriber: Specialist;
  medication: Medication;
  dosage: Dosage;
  routeOfAdministration
  schedule
  instructions
}

export class Dosage {
  amount: number; // amount of a drug taken at any one time
  measurement?: string;
  form?: string // 

}

export class Specialist {

}

export class Employee extends Person {
  id?: string;
  birthDate?: Date;
  profileUrl?: string;
  hireDate?: Date;
  terminationDate?: Date;
  ssn?: string;

}



export class User {
  id?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  profileUrl?: string;
  roles?: string[];
  permissions?: Permission[] | string[];
  notifications?: Notification[];
  pushDevices?: Device[];
  facilities?: Array<any>;
}

export class Notification {
  id?: string;
  type: string;
  source: string;
  event: string;
  dismissed: boolean;
  data: Object;
}

export class Contact {
  phoneNumbers: PhoneNumber[];
  email: string;
  addresses: Address[];

}

export class Index {
  id: boolean;
}

export class Facility {
  legalName?: string;
  displayName?: string;
  status?: string; // whether the facility is active or not
  address?: Address;
  licenseNumber?: string;
  contacts?: Contact[]; // These are the official contacts for the facility
  users?: Array<any>;
}

export class Permission {
  id?: string;
  name?: string;
  level?: string;
}

export class Role {
  name?: string;
  isCustom?: boolean;
  isGlobal?: boolean;
  createdOn?: string;
  createdBy?: string;
  facilityRestrictions?: string;
  modules?: UIModule[];
  permissions?: Permission[];
}

export class UIModule {
  id?: string;
  name?: string;
  uiElements?: string[];
}

export class Task {
  id?: string;
  description?: string;
  isComplete?: boolean;
  time?: string;
  createdOn?: string = moment().format();
  createdBy?: User;
  assignments?: User[]

  constructor(description: string = '', isComplete: boolean = false) {
    this.description = description;
    this.isComplete = isComplete;

  }

}