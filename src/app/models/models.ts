import * as moment from 'moment';

export class Person {
  firstName?: string;
  lastName?: string;
  middleName?: string;
  gender?: string;
}

export class Address {
  line1?: string = '';
  line2?: string = '';
  city?: string = '';
  stateOrProvice?: string = '';
  zipOrPostalCode?: string = '';
  country?: string = '';
}

export class Device {
  pushToken?: string;
  canPush?: boolean;
}

export class PhoneNumber {
  id?: number;
  name?: string;
  description?: string;
  number?: string;
  type?: string; // mobile, home, work, fax, etc.
  isPrimary?: boolean;
}

export class Pharmacy {
  id?: number;
  name?: string;
  address?: Address;
  phoneNumbers?: PhoneNumber[];
}

export class Resident {
  id?: number;
  firstName?: string;
  lastName?: string;
  middleName?: string;
  gender?: string;
  birthDate?: string;
  ssn?: string;
  code?: string;
  isAmbulatory?: boolean;
  isVerbal?: boolean;
  religion?: string;
  profileUrl?: string;
  weightLog?: Object[];
  emergencyContacts?: ResidentContact[];
  facilityInfo?: Object;
  paymentInfo?: Object;
  medications?: MedicationRecord[] | number[];
}

export class PrnRecord {
  id?: number;
  medication: MedicationRecord;
  reasonGiven: string;
  givenAt: string;
  givenBy: Employee;
  followUpDateTime: string;
  response?: string;
  responseNotes?: string;
}

export class Medication {
  brandName: string;
  genericName: string;
  description?: string;
  strength?: { amount: number; measurement: string; }; // this is the strength of one unit of the medication form
  form?: string;
  imageUrl?: string;
}

export class MedicationInventoryItem {
  containerType?: string;
  startQuantity?: number;
  quantity?: number;
  startDate?: string;
  endDate?: string;
  fillDate?: string;
  expirationDate?: string;
  pharmacy?: Pharmacy;
  rxNumber?: string; // should this go into inventory
}

export class MedicationRecord extends Medication {
  id?: number;
  instructions?: string;
  status?: string; // whether the medication is active, on hold, discontinued
  statusHistory?: MedicationStatusHistory[];
  history?: MedicationHistoryRecord[];
  createDate?: string; // should be autogenerated on the date the medication record was createDate
  createdBy?: User; // the user that created the medication record
  startDate?: string;
  endDate?: string;
  dosage?: Dosage;
  refills?: number; // number of refills for the prescription
  inventory?: MedicationInventoryItem[];
  script?: MedicationPrescription;
  isNarcotic?: boolean;
}

export class MedicationHistoryRecord {
  action: string;
  actionDate: Date;
  user: User;

}

export class MedicationStatusHistory {
  status: string;
  date: Date; 
  restartDate?: Date;
  changeDate?: Date;
}

export class MedicationPrescription {
  id?: number;
  resident: Resident;
  prescriber: Specialist;
  medication: Medication;
  dosage: Dosage;
  routeOfAdministration: string;
  schedule;
  instructions;
}

export class Dosage {
  amount?: number; // amount of a drug taken at any one time
  measurement?: string;
  form?: string; // 

}

export class Specialist {

}

export class Employee extends Person {
  id?: number;
  birthDate?: Date;
  profileUrl?: string;
  hireDate?: Date;
  terminationDate?: Date;
  ssn?: string;

}



export class User {
  id?: number;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  profileUrl?: string;
  roles?: string[];
  permissions?: Permission[] | string[];
  notifications?: Notification[];
  pushDevices?: Device[];
  facilities?: Array<any>;
}

export class Notification {
  id?: number;
  type?: string;   // type of notification. alert, reminder, message
  source?: string; // the part of the app that generated the notification
  event?: string;  // the action that triggered the notification
  dismissed?: boolean;
  component?: any; // notification component to load
  icon?: string;   // icon to 
  url?: string;    // link to send the user when the click they tab the notification
  data?: {
    title?: string,
    summary?: string,
    createdBy?: string | User,
    createdFor?: string | Resident,
    createdAt?: string,
    images?: string[],
    notes?: string,
    lastBM?: string
  };
}

export class ContactInfo {
  phoneNumbers: PhoneNumber[];
  email: string;
  addresses: Address[];

}

export class ResidentContact extends ContactInfo {
  firstName: string;
  middleName?: string;
  lastName: string;
  relationship: string;
  isEmergency?: boolean = false;
}

export class Index {
  id: boolean;
}

export class Facility {
  id?: number
  //legalName?: string;
  name: string;
  displayName?: string;
  status?: string; // whether the facility is active or not
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  stateOrProvince?: string;
  postalCode?: string;
  facilityNumber?: number;
  licenseNumber?: string;
  contacts?: ContactInfo[]; // These are the official contacts for the facility
  users?: Array<any>;
}

export class Permission {
  id?: number;
  name?: string;
  level?: string;
}

export class Role {
  name?: string;
  isCustom?: boolean;
  isGlobal?: boolean;
  createdOn?: string;
  createdBy?: string;
  facilityRestrictions?: string;
  modules?: UIModule[];
  permissions?: Permission[];
}

export class UIModule {
  id?: number;
  name?: string;
  uiElements?: string[];
}

export class Task {
  id?: number;
  description?: string;
  isComplete?: boolean;
  completedOn?: string;
  completedBy?: User;
  dueDate?: string;
  createdOn?: string;
  createdBy?: User;
  assignedTo?: User[];

  constructor(description: string = '', isComplete: boolean = false) {
    this.description = description;
    this.isComplete = isComplete;

  }

}